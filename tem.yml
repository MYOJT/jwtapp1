AWSTemplateFormatVersion: '2010-09-09'
Resources:
  # S3 Bucket
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-upload-bucket

  # SQS Queue
  MyQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: MyQueue

  # Lambda Function
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyLambdaFunction
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import base64
          import boto3

          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              for record in event['Records']:
                  body = json.loads(record['body'])
                  file_name = body['fileName']
                  file_content = base64.b64decode(body['fileContent'])

                  s3.put_object(
                      Bucket='my-upload-bucket',
                      Key=file_name,
                      Body=file_content
                  )

              return {
                  'statusCode': 200,
                  'body': json.dumps('File uploaded successfully')
              }
      Runtime: python3.8

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSQSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt MyQueue.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: arn:aws:s3:::my-upload-bucket/*

  # Lambda Event Source Mapping (to trigger Lambda from SQS)
  MyQueueLambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt MyQueue.Arn
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Enabled: True

  # API Gateway Rest API
  MyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyApi

  # API Gateway Resource
  MyApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: upload
      RestApiId: !Ref MyApi

  # API Gateway Method
  MyApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref MyApiResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:sqs:action/SendMessage&QueueUrl=https://${AWS::AccountId}.queue.amazonaws.com/${MyQueue}
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200

  # API Gateway Deployment
  MyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref MyApi
      StageName: prod
    DependsOn: MyApiMethod

  # SQS Policy for API Gateway to send messages to SQS
  SqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref MyQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt MyQueue.Arn
            Condition:
              ArnLike:
                aws:SourceArn:
                  Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/*

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value:
      Fn::Sub: "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/upload"
